import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java-library'
    id 'io.freefair.lombok' version '4.1.6'
    id "org.gretty" version "3.0.3"
}

apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'war'


group = 'com.myapp.api'
version = file("./version.txt").getText().trim()
sourceCompatibility = JavaVersion.VERSION_13
targetCompatibility = JavaVersion.VERSION_13

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }
    maven { url 'https://plugins.gradle.org/m2/' }
}

configurations {
    all*.exclude group: 'org.sonatype.sisu'
    all*.exclude group: 'javax.resource', module: 'connector'
    all*.exclude group: 'commons-lang', module: 'commons-lang'
    all*.exclude group: 'javax.servlet', module: 'servlet-api'
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    all*.exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    all*.exclude group: "junit", module: "junit"
}

ext {
    annotation = '1.3.2'

    spring = '5.2.7.RELEASE'

    servlet = '4.0.1'

    // log
    slf4j = '1.7.30'
    logback = '1.2.3'

    // JSR 349 - Bean validation
    validationapi = '2.0.1.Final'
    hibernate = '6.0.18.Final'
}

dependencies {
    implementation "javax.annotation:javax.annotation-api:$annotation"

    // spring web
    implementation "org.springframework:spring-webmvc:$spring"

    implementation "org.slf4j:slf4j-api:$slf4j"
    implementation "ch.qos.logback:logback-classic:$logback"

    api "org.hibernate.validator:hibernate-validator:$hibernate"
    api "org.hibernate.validator:hibernate-validator-cdi:$hibernate"
    implementation "javax.validation:validation-api:$validationapi"

    compileOnly "javax.servlet:javax.servlet-api:$servlet"

    testImplementation "org.springframework:spring-test:$spring"

    // 5.6 bug ?
    testImplementation('org.junit.jupiter:junit-jupiter-engine:5.5.+')

    // Mokito
    testImplementation('org.mockito:mockito-core:3.+')
    testImplementation('org.mockito:mockito-junit-jupiter:3.+')
}

/**
 * Build.
 */
tasks.withType(Exec) {
    doFirst {
        println commandLine
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.incremental = true
    sourceCompatibility = JavaVersion.VERSION_13
    targetCompatibility = JavaVersion.VERSION_13
}

/**
 * Test.
 */
test {
    // Junit 5 required
    useJUnitPlatform()
    reports {
        junitXml.enabled = true
        html.enabled = true
    }
    systemProperty 'env', "TEST"
    testLogging {
        // set options for log level LIFECYCLE
        events "failed"
        exceptionFormat "short"

        // set options for log level DEBUG
        debug {
            events "started", "skipped", "failed"
            exceptionFormat "full"
        }

        // remove standard output/error logging from --info builds
        // by assigning only 'failed' and 'skipped' events
        info.events = ["failed", "skipped"]
    }
}

processResources {
    with copySpec {
        from 'src/main/resources'
        project.properties.findAll().each { prop ->
            filter(ReplaceTokens, tokens: [version: version])
        }
    }
}

gretty {
    servletContainer = 'tomcat9'
    contextPath = '/'
}
